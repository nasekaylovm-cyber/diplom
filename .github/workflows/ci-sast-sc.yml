name: CI - SAST and Security Checks

on:
  push:
    branches: [ nasekaylovm-cyber-patch-1 ]
  pull_request:
    branches: [ nasekaylovm-cyber-patch-1 ]

jobs:
  security-checks:
    name: Security Checks - Secrets and Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect secrets in repository
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml
        redact: true
        verbose: true

    - name: Check for vulnerable dependencies
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  sast-analysis:
    name: SAST - Static Application Security Testing
    runs-on: ubuntu-latest
    needs: security-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Semgrep SAST Scan
      uses: returntocorp/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/security-audit
        # Отключаем SARIF и используем только консольный вывод
        output: semgrep-results.txt
        format: txt

    - name: Display Semgrep Results
      run: |
        if [ -f "semgrep-results.txt" ]; then
          echo "=== Semgrep Results ==="
          cat semgrep-results.txt
        else
          echo "No Semgrep results file found"
        fi

    - name: Bandit Python SAST
      run: |
        if [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true
        fi

  build: 
      name: CI → PHP 8.1
      runs-on: ubuntu-latest
    
      steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, json, pdo_mysql

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            vendor
          key: composer-${{ hashFiles('**/composer.lock') }}

      - name: Update Composer dependencies
        run: |
          composer update --no-interaction --prefer-dist

      - name: Install Composer dependencies
        run: |
          composer install --no-interaction --prefer-dist

      - name: Clear compiled files
        run: |
          php artisan clear-compiled

      - name: Prepare environment
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: Run migrations
        run: |
          php artisan migrate --force

      - name: Run tests
        run: |
          vendor/bin/phpunit

     
