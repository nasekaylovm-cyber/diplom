name: CI - SAST and Security Checks

on:
  push:
    branches: [ nasekaylovm-cyber-patch-1 ]
  pull_request:
    branches: [ nasekaylovm-cyber-patch-1 ]

jobs:
  security-checks:
    name: Security Checks - Secrets and Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect secrets in repository
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml
        redact: true
        verbose: true

    - name: Check for vulnerable dependencies
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  sast-analysis:
    name: SAST - Static Application Security Testing
    runs-on: ubuntu-latest
    needs: security-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Semgrep SAST Scan
      uses: returntocorp/semgrep-action@v1
      continue-on-error: true
      with:
        config: p/security-audit
        # Отключаем SARIF и используем только консольный вывод
        output: semgrep-results.txt
        format: txt

    - name: Display Semgrep Results
      run: |
        if [ -f "semgrep-results.txt" ]; then
          echo "=== Semgrep Results ==="
          cat semgrep-results.txt
        else
          echo "No Semgrep results file found"
        fi

    - name: Bandit Python SAST
      run: |
        if [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true
        fi

  build:
      name: CI → ${{ matrix.php }}
      runs-on: ubuntu-latest
      strategy:
        matrix:
          php: [ "5.6", "7.1", "7.4" ]  
      steps:
        - name: Checkout
          uses: actions/checkout@v4
  
        - name: Setup PHP ${{ matrix.php }}
          uses: shivammathur/setup-php@v3
          with:
            php-version: ${{ matrix.php }}
            extensions: mbstring, xml, json, pdo_mysql
            coverage: xdebug
  
        - name: Use Composer cache
          uses: actions/cache@v4
          with:
            path: ~/.composer/cache
            key: composer-${{ matrix.php }}-${{ hashFiles('**/composer.lock') }}
  
        - name: Install Composer dependencies
          # Для старых пакетов иногда нужен --ignore-platform-reqs
          run: composer install --no-interaction --prefer-dist || composer install --no-interaction --prefer-dist --ignore-platform-reqs
  
        - name: Composer audit (check for known vulnerabilities)
          run: |
            if composer --version 2>/dev/null | grep -q "Composer"; then
              composer audit || true
            else
              echo "composer audit not available, skipping"
            fi
  
        - name: Run PHPStan 
          if: ${{ always() }}
          run: |
            if [ -f "phpstan.neon" ] || [ -f "phpstan.neon.dist" ]; then
              composer require --dev phpstan/phpstan:^0 || true
              vendor/bin/phpstan analyse -c phpstan.neon || echo "phpstan found issues"
            else
              echo "phpstan config not found, skipping"
            fi
  
        - name: Run PHPCS (code style, не фатально)
          if: ${{ always() }}
          run: |
            composer require --dev squizlabs/php_codesniffer || true
            vendor/bin/phpcs --standard=PSR2 --extensions=php app/ || true
  
        - name: Prepare environment
          run: |
            cp .env.example .env || true
            php artisan key:generate || true
            # Use sqlite if DB not configured
            sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=sqlite/' .env || true
            mkdir -p database && touch database/database.sqlite || true
  
        - name: Run migrations (if any) and tests
          run: |
            php artisan migrate --force || true
            if [ -f "vendor/bin/phpunit" ]; then
              vendor/bin/phpunit --configuration phpunit.xml.dist || true
            else
              echo "phpunit not installed or no tests"
            fi
  
        - name: Upload test & static-analysis artifacts
          if: ${{ always() }}
          uses: actions/upload-artifact@v4
          with:
            name: ci-artifacts-${{ matrix.php }}
            path: |
              ./vendor || true
              ./storage/logs || true
              ./phpstan-report || true


  codeql:
        name: Analyze (CodeQL)
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repo
            uses: actions/checkout@v4
    
          - name: Initialize CodeQL
            uses: github/codeql-action/init@v2
            with:
              languages: php
    
          - name: Autobuild
            uses: github/codeql-action/autobuild@v2
    
          - name: Perform CodeQL analysis
            uses: github/codeql-action/analyze@v2
   
