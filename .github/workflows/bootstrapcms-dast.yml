Давайте создадим пайплайн с улучшенной обработкой ошибок и формированием подробного отчета о безопасности:

```yaml
name: DAST - OWASP ZAP Security Pipeline

on:
  push:
    branches: ["nasekaylovm-cyber-patch-1"]
  pull_request:
    branches: ["nasekaylovm-cyber-patch-1"]
  workflow_dispatch:
    inputs:
      target-url:
        description: 'Target URL for scanning'
        required: false
        default: 'http://127.0.0.1:8080'

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    env:
      TARGET_URL: ${{ github.event.inputs.target-url }}
      REPORT_PATH: ./security-reports

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP environment
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: mbstring, pdo_mysql, xml, curl, json, tokenizer

    - name: Install dependencies
      run: |
        composer clear-cache
        composer install --no-dev --no-scripts --no-interaction --ignore-platform-reqs || true

    - name: Prepare environment
      run: |
        mkdir -p ${{ env.REPORT_PATH }}
        cp .env.example .env || true
        php artisan key:generate || true
        php artisan migrate --force || true

    - name: Start application
      run: |
        nohup php artisan serve --host=0.0.0.0 --port=8080 > /tmp/serve.log 2>&1 &
        sleep 5

    - name: Wait for application
      run: |
        MAX_ATTEMPTS=30
        for i in $(seq 1 $MAX_ATTEMPTS); do
          if curl -sSf ${{ env.TARGET_URL }}; then
            echo "Application is up"
            break
          fi
          echo "Waiting for application... ($i/$MAX_ATTEMPTS)"
          sleep 2
        done
        if [ $i -eq $MAX_ATTEMPTS ]; then
          echo "Application failed to start"
          exit 1
        fi

    - name: Setup Docker environment
      run: |
        docker system prune -f
        docker pull owasp/zap2docker-weekly

    - name: Run ZAP scan with error handling
      id: zap-scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: ${{ env.TARGET_URL }}
        docker_name: owasp/zap2docker-weekly
        cmd_options: '-a -j'
        fail_action: false
        allow_issue_writing: true
        issue_title: 'ZAP Security Scan Report'
      continue-on-error: true

    - name: Generate security report
      run: |
        echo "### Security Pipeline Report" > ${{ env.REPORT_PATH }}/security-report.md
        echo "## Application Status" >> ${{ env.REPORT_PATH }}/security-report.md
        echo "Target URL: ${{ env.TARGET_URL }}" >> ${{ env.REPORT_PATH }}/security-report.md
        
        if [[ ${{ steps.zap-scan.outcome }} == 'success' ]]; then
          echo "## ZAP Scan Status: Success" >> ${{ env.REPORT_PATH }}/security-report.md
        else
          echo "## ZAP Scan Status: Failed" >> ${{ env.REPORT_PATH }}/security-report.md
          echo "### Errors encountered during scan:" >> ${{ env.REPORT_PATH }}/security-report.md
          echo "${{ steps.zap-scan.outputs.errors }}" >> ${{ env.REPORT_PATH }}/security-report.md
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: ${{ env.REPORT_PATH }}
        retention-days: 30

    - name: Publish report to GitHub Pages (optional)
      uses: peaceiris/actions-gh-pages@v3
      if: success() || failure()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
