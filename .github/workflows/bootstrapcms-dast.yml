name: DAST - OWASP ZAP Security Pipeline

on:
  push:
    branches: ["nasekaylovm-cyber-patch-1"]
  pull_request:
    branches: ["nasekaylovm-cyber-patch-1"]
  workflow_dispatch:
    inputs:
      target-url:
        description: 'Target URL for scanning'
        required: false
        default: 'http://127.0.0.1:8080'

env:
  REPORT_PATH: ./security-reports
  SCAN_TIMEOUT: 60

jobs:
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create reports directory
        run: mkdir -p ${{ env.REPORT_PATH }}

      - name: Setup PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4'
          extensions: mbstring, pdo_mysql, xml, curl, json, tokenizer

      - name: Install dependencies with error handling
        id: deps-install
        continue-on-error: true
        run: |
          echo "Attempting to install dependencies..."
          composer clear-cache || true
          composer install --no-dev --no-scripts --no-interaction --ignore-platform-reqs || echo "Deps install completed with warnings"

      - name: Setup application
        id: app-setup
        continue-on-error: true
        run: |
          cp .env.example .env || true
          php artisan key:generate || echo "Key generation skipped"
          php artisan migrate --force || echo "Migrations skipped"

      - name: Start application server
        id: start-app
        run: |
          # Kill any existing processes
          pkill -f "php artisan serve" || true
          # Start the application
          nohup php artisan serve --host=0.0.0.0 --port=8080 > /tmp/serve.log 2>&1 &
          echo "Application starting..."
          sleep 10

      - name: Wait for application readiness
        id: wait-for-app
        run: |
          MAX_ATTEMPTS=30
          for i in $(seq 1 $MAX_ATTEMPTS); do
            if curl -s -f http://127.0.0.1:8080 > /dev/null 2>&1; then
              echo "‚úÖ Application is ready and responding"
              echo "app-ready=true" >> $GITHUB_OUTPUT
              break
            else
              echo "‚è≥ Waiting for application... ($i/$MAX_ATTEMPTS)"
              if [ $i -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå Application failed to start within timeout"
                echo "app-ready=false" >> $GITHUB_OUTPUT
                # Don't fail the job yet, try to scan anyway
              fi
              sleep 2
            fi
          done

      - name: Run ZAP security scan
        id: zap-scan
        continue-on-error: true
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://127.0.0.1:8080'
          cmd_options: '-a -j -t ${{ env.SCAN_TIMEOUT }}'
          rules_file_name: '.zap-baseline-rules.conf'
          fail_action: false
          allow_issue_writing: true
          issue_title: 'ZAP Security Scan Report - ${{ github.sha }}'
          issue_labels: 'security,automated-scan'

      - name: Collect logs and artifacts
        if: always()
        run: |
          echo "üìÅ Collecting logs and reports..."
          
          # Application logs
          if [ -f /tmp/serve.log ]; then
            cp /tmp/serve.log ${{ env.REPORT_PATH }}/application.log
          fi
          
          # ZAP reports
          for report in *.html *.json *.xml; do
            if [ -f "$report" ]; then
              cp "$report" ${{ env.REPORT_PATH }}/
            fi
          done
          
          # Create summary file
          echo "# Security Scan Summary" > ${{ env.REPORT_PATH }}/summary.md
          echo "## Scan Details" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Target**: http://127.0.0.1:8080" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Timestamp**: $(date)" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Commit**: ${{ github.sha }}" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Application Ready**: ${{ steps.wait-for-app.outputs.app-ready }}" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Dependencies Installed**: ${{ steps.deps-install.outcome }}" >> ${{ env.REPORT_PATH }}/summary.md
          echo "- **Scan Status**: ${{ steps.zap-scan.outcome }}" >> ${{ env.REPORT_PATH }}/summary.md

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: ${{ env.REPORT_PATH }}
          retention-days: 90

      - name: Create GitHub Issue with results
        if: always()
        uses: actions/github-script@v7
        env:
          SCAN_STATUS: ${{ job.status }}
          APP_READY: ${{ steps.wait-for-app.outputs.app-ready }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let issueBody = `# üîç Security Scan Report\n\n`;
            issueBody += `## üìä Scan Information\n`;
            issueBody += `- **Target URL**: http://127.0.0.1:8080\n`;
            issueBody += `- **Scan Date**: ${new Date().toISOString()}\n`;
            issueBody += `- **Commit**: [${process.env.GITHUB_SHA.substring(0, 8)}](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/commit/${process.env.GITHUB_SHA})\n`;
            issueBody += `- **Application Status**: ${process.env.APP_READY === 'true' ? '‚úÖ Ready' : '‚ùå Failed to start'}\n`;
            issueBody += `- **Overall Status**: ${process.env.SCAN_STATUS === 'success' ? '‚úÖ Success' : '‚ö†Ô∏è Completed with issues'}\n\n`;
            
            issueBody += `## üìÅ Artifacts\n`;
            issueBody += `Detailed reports are available in [workflow artifacts](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})\n\n`;
            
            issueBody += `## üîß Next Steps\n`;
            issueBody += `1. Review the uploaded security reports\n`;
            issueBody += `2. Address any critical security findings\n`;
            issueBody += `3. Re-run scan after fixes\n`;
            
            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Scan Results - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['security-scan', 'automated', 'dast']
            });
            
            console.log(`‚úÖ Issue created: ${issue.data.html_url}`);

      - name: Final status report
        if: always()
        run: |
          echo "=== SECURITY PIPELINE COMPLETE ==="
          echo "Status: ${{ job.status }}"
          echo "Application Ready: ${{ steps.wait-for-app.outputs.app-ready }}"
          echo "Reports: Available in artifacts"
          echo "Issue: Created in repository issues"
