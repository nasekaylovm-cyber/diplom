name: CI/CD Security Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

 sast:
    name: SAST Scan with Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit
          sarifUpload: true
        continue-on-error: true

secret-scan:
    name: Secret Scanning with TruffleHog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          args: '--no-update git file://. --only-verified --json'
        continue-on-error: true


  build:
     name: Build Project
    runs-on: ubuntu-latest
    needs: [sast, secret-scan]
    strategy:
      matrix:
        php: [ '7.4' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: mbstring, dom, fileinfo, mysql, curl, tokenizer, xml, json
          tools: composer:v1
          ini-values: post_max_size=256M, max_execution_time=180
          coverage: none

      - name: Check PHP Version
        run: php -v

      - name: Check Composer Version
        run: composer --version

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --no-scripts
        env:
          COMPOSER_PLATFORM_REQUIREMENTS: php-7.4

      - name: Check dependencies for security issues
        run: composer audit

      - name: Optimize autoloader for production
        run: composer dump-autoload --optimize

      - name: Run tests (if any exist)
        run: vendor/bin/phpunit --colors=always

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: build
    
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
           
             cd /var/www/bootstrap-cms
            git pull origin main
            php /usr/local/bin/composer-1.phar install --no-dev --optimize-autoloader --no-progress --no-interaction
            sudo systemctl reload nginx

  dast:
    name: DAST Scan with ZAP
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://5.129.250.92'
          rules_file_name: 'All'
          cmd_options: '-a'
          report_html: 'report.html'
          report_md: 'report.md'

      - name: Upload ZAP HTML report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-html-report
          path: report.html

      - name: Upload ZAP Markdown report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-md-report
          path: report.md
